#!/usr/bin/env ruby
el
# written 2012 by tpltnt
# License: GPLv3

require 'base64'

# create dump and take care of everything
#
# * *Args* :
#   - +filename+ name of the dump to generate
# * *Returns* :
#   - {File}[http://ruby-doc.org/core-1.9.3/File.html]-object of the dump
def create_dump(filename)
  if !system( "sup-dump > #{filename}" ) then
    puts "creating dump failed ..."
    exit 1
  end

  begin
    dumpfile = File.open(filename,'r')
  rescue Errno::ENOENT
    puts "dump not found"
    exit 1
  end

  return dumpfile
end

# determine names of maildirs
#
# * *Args* :
#   - +supdir+ config directory for sup (default: ~/.sup)
# * *Returns* :
#   - Array of directories
def get_maildirs(supdir)
  maildirnames = []
  supconfig = File.open("#{supdir}/config.yaml",'r')
  supconfig.each do |line|
    maildir = line.split(":sent_source: maildir:")[1]
    if maildir then
      maildirnames.push(maildir.strip)
    end
  end
  maildirnames = maildirnames.uniq
  # test maildir for being a directory
  maildirnames.each do |maildirname|
    if !File.directory?(maildirname) then
      puts "given maildir is not a directory"
      exit 1
    end
  end
  return maildirnames
end

# determine emails to kill
#
# * *Args* :
#   - +dumpindex+ File-object of the sup-dump
# * *Returns* :
#   - Array of emails to delete
def get_killcandidates(dumpindex)
  candidates = []
  # iterate over all lines
  dumpindex.each do |line|
    # filter out all sane line
    if nil != line.match(/.*\@.*\s\(.*\)/) then
      # match against "deleted" flag
      if nil != line.match(/deleted/) then
        # split at "deleted" and get first chunk of chars & add to list of messages
        candidates.push( line.split(/deleted/)[0].split(" ")[0] )
      end
    end
  end
  return candidates
end

# sanity check for given parameter
if 1 != ARGV.length then
  puts "usage: sup-purge2 <supdir>"
  exit 1
end

supdir = ARGV[0].to_s

if !File.directory?(supdir) then
  puts "given sup-directory is invalid"
  exit 1
end


## --- create dump
dumpfilename = Base64.encode64( Time.now.to_s ).strip + ".supdump"
dump = create_dump(dumpfilename)

## --- determine maildirnames
maildirnames = get_maildirs(supdir)

# get files to be deleted
messagestobedeleted = get_killcandidates(dump)

dump.close
# delete dump
File.delete(dumpfilename)

# find messages & delete them
# not really good performing algorithm, but works
maildirnames.each do |maildir|
  messagestobedeleted.each do |delfile|
    puts "#{maildir}/---/#{delfile} deleted"
    if File.exists?("#{maildir}/new/#{delfile}") then
      puts "#{maildir}/new/#{delfile} deleted"
    else if File.exists?("#{maildir}/cur/#{delfile}") then
           puts "#{maildir}/cur/#{delfile} deleted"
         else if File.exists?("#{maildir}/tmp/#{delfile}")
                puts "#{maildir}/tmp/#{delfile} deleted"
              end
         end
    end
  end

end

## --- restore index
# rm -rf ~/.sup/xapian; sup-sync --all-sources --all --restore <dumpfile>
#remove .sup/xapian
#sync indexes
