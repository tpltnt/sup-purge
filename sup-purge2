#!/usr/bin/env ruby

# written 2012 by tpltnt
# License: GPLv3

require 'base64'

if 1 != ARGV.length then
  puts "usage: sup-purge2 <supdir>"
  exit 1
end

supdir = ARGV[0].to_s

# sanity check for given parameter
if !File.directory?(supdir) then
  puts "given sup-directory is invalid"
  exit 1
end


## --- create dump
dumpfilename = Base64.encode64( Time.now.to_s ).strip + ".supdump"
puts dumpfilename
if !system( "sup-dump > #{dumpfilename}" ) then
  puts "creating dump failed ..."
  exit 1
end

begin
  dump = File.open(dumpfilename,'r')
rescue Errno::ENOENT
  puts "dump not found"
  exit 1
end

File.delete(dumpfilename)
exit 0

## --- determine maildirnames
maildirnames = []
# :sent_source: maildir:/home/user/.emails/js
# test maildir for being a directory
maildirnames.each do |maildirname|
  if !File.directory?(maildirname) then
    puts "given maildir is not a directory"
    exit 1
  end
end

# get files to be deleted
messagestobedeleted = []
# iterate over all lines
dump.each do |line|
  # filter out all sane line
  if nil != line.match(/.*\@.*\s\(.*\)/) then
    # match against "deleted" flag
    if nil != line.match(/deleted/) then
      # split at "deleted" and get first chunk of chars & add to list of messages
      messagestobedeleted.push( line.split(/deleted/)[0].split(" ")[0] )
    end
  end
end

dump.close

# delete dump
File.delete(dumpfilename)

# find messages & delete them
messagestobedeleted.each do |delfile|
  if File.exists?("#{maildir}/#{delfile}") then
    puts "#{maildir}/#{delfile} deleted"
  end
end

## --- restore index
# rm -rf ~/.sup/xapian; sup-sync --all-sources --all --restore <dumpfile>
#remove .sup/xapian
#sync indexes
